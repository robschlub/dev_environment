// Retrieve color and shade from palette
@function color_from_palette($palette, $color, $shade) {
  @return map-get(map-get($palette, $color), $shade);
}

// Add contrasts to a palette and return a new palette with contrasts added
@function add-contrasts-to-palette($palette, $contrast_map) {
  $new-palette: ();

  @each $hue, $hue-map in $palette {
    $map: ();
    $map: map-merge(
      $hue-map,
      (
        'lower': color_from_palette($palette, $hue, map-get($contrast_map, 'lower')),
        'low': color_from_palette($palette, $hue, map-get($contrast_map, 'low')),
        'high': color_from_palette($palette, $hue, map-get($contrast_map, 'high')),
        'higher': color_from_palette($palette, $hue, map-get($contrast_map, 'higher')),
      ),
    );
    $new-palette: map-merge($new-palette, ($hue: $map));
  }

  @return $new-palette;
}

// Global variables that are needed for below functions:
//  - $_color_theme:   The map of all colors in a theme

// Get the color and shade from a globally defined palette
@function palette-color($color, $shade) {
  $palette: map-get($_color_theme, palette);

  @return map-get(map-get($palette, $color), $shade);
}

$_color_special_map_names: diagram, lesson, site, navbar;

//
// Get color function from color_theme
//  color(1):                       get 'hue1' from root of theme-map
//  color(1, dark):                 get 'hue1' shade 'dark'
//  color(diagram, 'text'):         get 'text' default color from diagram
//  color(diagram, 'text', 'dark'): get 'text' hue with shade 'dark'
//
@function color($fromOrName, $nameOrShade: '', $shadeName: '') {
  // If the color is from a sub-map (like diagram, or lesson)
  @if index($_color_special_map_names, $fromOrName) {
    $color-map: map-get(map-get($_color_theme, $fromOrName), $nameOrShade);
    $color: map-get($color-map, color);
    $shade: map-get($color-map, shade);

    @if $shadeName != '' {
      $shade: $shadeName;
    }

    @return palette-color($color, $shade);
  }

  // Otherwise it's from the root hue map
  $color-map: map-get($_color_theme, 'hue' + $fromOrName);
  $color: map-get($color-map, color);
  $shade: map-get($color-map, shade);

  @if $nameOrShade != '' {
    $shade: $nameOrShade;
  }

  @return palette-color($color, $shade);
}

// Retrieve hue name from theme-colors
@function hue($fromOrName, $name: '') {
  $map: ();

  @if index($_color_special_map_names, $fromOrName) {
    $map: map-get(map-get($_color_theme, $fromOrName), $name);
  }

  @else {
    $map: map-get($_color_theme, 'hue' + $fromOrName);
  }

  // $map: hue-map($fromOrName, $name);
  $col: map-get($map, color);

  @return $col;
}


@function create_colour_map($color, $lighter, $light, $dark, $darker) {
  $map: (
    'base': $color,
    'lighter': lighten($color, $lighter),
    'light': lighten($color, $light),
    'dark': darken($color, $dark),
    'darker': darken($color, $darker),
  );

  @if $color == #000 {
    $map: (
      'base': $color,
      'lighter': lighten($color, 80),
      'light': lighten($color, 60),
      'dark': lighten($color, 40),
      'darker': lighten($color, 20),
    );
  }

  @if $color == #FFF {
    $map: (
      'base': $color,
      'lighter': darken($color, 20),
      'light': darken($color, 40),
      'dark': darken($color, 60),
      'darker': darken($color, 80),
    );
  }

  @return $map;
}

@function fill_palette($base_colors) {
  $palette: ();

  @each $key, $value in $base_colors {
    $map: ();
    $map: map-merge($map, ($key: create_colour_map($value, 30%, 15%, 15%, 30%)));
    $palette: map-merge($palette, $map);
  }

  @return $palette;
}

