# Development environment for:
#   - Python/JS Linting
#   - Python/JS Testing
#   - JS Building
#   - Flask debugging

FROM rschlub/nodepy

# ## General ##
WORKDIR /opt/app

# This is the folder that will be shared with the docker host machine
RUN mkdir app
RUN mkdir tests
RUN mkdir src



# ## Javascript ##

# Node packages
ADD containers/dev/package.json .

RUN npm install --save 		 react@16.3.2 \
    											 react-dom@16.3.2

RUN npm install --save-dev eslint@4.19.1 \
													 eslint-plugin-import@2.11.0 \
													 eslint-config-airbnb-base@12.1.0 \
													 eslint-plugin-flowtype@2.46.3 \
													 eslint-plugin-react@7.7.0 \
													 webpack@4.6.0 \
													 webpack-cli@2.0.15 \
													 babel-preset-env@1.6.1 \
													 babel-loader@7.1.4 \
													 babel-core@6.26.0 \
													 babel-preset-flow@6.23.0 \
													 babel-preset-react@6.24.1 \
													 flow-bin@0.68.0 \
													 uglifyjs-webpack-plugin@1.2.5 \
													 babel-eslint@8.2.3 \
													 jest@22.4.3 \
													 babel-jest@22.4.3 \
    											 regenerator-runtime@0.11.1 \
    											 eslint-plugin-jest@21.15.1 \
    											 clean-webpack-plugin@0.1.19 \ 		
    											 mini-css-extract-plugin@0.4.0 \	
    											 css-loader@0.28.11 \							
    											 sass-loader@6.0.7 \							
    											 node-sass@4.8.3 \								
												   postcss-loader@2.1.4 \						
												   autoprefixer@8.3.0 \
													 react-test-renderer@16.3.2 \
													 whatwg-fetch@2.0.4 \
													 babel-polyfill@6.26.0 \
													 stylelint-config-standard@18.2.0 \
													 stylelint@9.2.0 \ 
													 stylelint-scss@3.0.1 \
													 postcss@6.0.21


# Linting
ADD .eslintrc.json .
ADD .eslintignore .
ADD .flowconfig .
ADD .stylelintrc .
ADD .stylelintignore .

# Packaging
ADD containers/dev/webpack.config.js .
ADD .babelrc .

# Update path so eslint can be run from anywhere
ENV PATH="/opt/app/node_modules/.bin:${PATH}"



# ## Python ##

# Python packages
ADD containers/dev/requirements_dev.txt requirements.txt
RUN pip install -r requirements.txt

# Python linting
ADD .flake8 .
ADD containers/dev/pytest.ini .

# Environment variable for flask
ENV FLASK_APP app/my_app.py
ENV FLASK_DEBUG 1

# Dev server script
ADD containers/dev/dev-server.sh .

# Use this is you want to load straight into flask
# CMD ["flask", "run", "--host=0.0.0.0"]

# ensure local python is preferred over distribution python
ENV PATH /usr/local/bin:$PATH

# http://bugs.python.org/issue19846
# > At the moment, setting "LANG=C" on a Linux system *fundamentally breaks Python 3*, and that's not OK.
ENV LANG C.UTF-8
# https://github.com/docker-library/python/issues/147
ENV PYTHONIOENCODING UTF-8

# runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
		ca-certificates \
		libgdbm3 \
		libreadline6 \
		libsqlite3-0 \
		libssl1.0.0 \
		netbase \
	&& rm -rf /var/lib/apt/lists/*

ENV GPG_KEY C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF
ENV PYTHON_VERSION 2.7.15

RUN set -ex \
	&& buildDeps=" \
		dpkg-dev \
		gcc \
		libbz2-dev \
		libc6-dev \
		libdb-dev \
		libgdbm-dev \
		libncursesw5-dev \
		libreadline-dev \
		libsqlite3-dev \
		libssl-dev \
		make \
		tcl-dev \
		tk-dev \
		wget \
		xz-utils \
		zlib1g-dev \
# as of Stretch, "gpg" is no longer included by default
		$(command -v gpg > /dev/null || echo 'gnupg dirmngr') \
	" \
	&& apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* \
	\
	&& wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz" \
	&& wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc" \
	&& export GNUPGHOME="$(mktemp -d)" \
	&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY" \
	&& gpg --batch --verify python.tar.xz.asc python.tar.xz \
	&& rm -rf "$GNUPGHOME" python.tar.xz.asc \
	&& mkdir -p /usr/src/python \
	&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \
	&& rm python.tar.xz \
	\
	&& cd /usr/src/python \
	&& gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
	&& ./configure \
		--build="$gnuArch" \
		--enable-shared \
		--enable-unicode=ucs4 \
	&& make -j "$(nproc)" \
	&& make install \
	&& ldconfig \
	\
	&& apt-get purge -y --auto-remove $buildDeps \
	\
	&& find /usr/local -depth \
		\( \
			\( -type d -a \( -name test -o -name tests \) \) \
			-o \
			\( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
		\) -exec rm -rf '{}' + \
	&& rm -rf /usr/src/python

# if this is called "PIP_VERSION", pip explodes with "ValueError: invalid truth value '<VERSION>'"
ENV PYTHON_PIP_VERSION 10.0.1

RUN set -ex; \
	\
	apt-get update; \
	apt-get install -y --no-install-recommends wget; \
	rm -rf /var/lib/apt/lists/*; \
	\
	wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \
	\
	apt-get purge -y --auto-remove wget; \
	\
	python get-pip.py \
		--disable-pip-version-check \
		--no-cache-dir \
		"pip==$PYTHON_PIP_VERSION" \
	; \
	pip --version; \
	\
	find /usr/local -depth \
		\( \
			\( -type d -a \( -name test -o -name tests \) \) \
			-o \
			\( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
		\) -exec rm -rf '{}' +; \
	rm -f get-pip.py

RUN apt-get update && apt-get install -y --no-install-recommends \
	build-essential \
	libcairo2-dev \
	libpango1.0-dev \
	libjpeg-dev \
	libgif-dev \
	librsvg2-dev

ENTRYPOINT ["bash"]